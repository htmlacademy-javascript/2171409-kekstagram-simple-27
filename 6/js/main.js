/*
ЗАДАНИЕ №1:
Функция, возвращающая случайное целое число из переданного диапазона включительно.
имя_функции(от, до); // Результат: целое число из диапазона "от...до"
+- аргументами функции могут быть только положительные числа и ноль
+- Если функции пришли неправильные аргументы, она должна вернуть NaN
+- если передать значение «до» меньшее, чем значение «от», или равное ему. Функция также может возвращать NaN.

Функция может не гарантировать верный результат, если в переданном диапазоне нет ни одного подходящего числа.
*/

const getRandomIntInclusive = (min, max) => {
  if (min < 0 || max < 0 || !Number.isInteger(min) || !Number.isInteger(max)) {
    //   "аргументами функции могут быть только положительные числа и ноль"
    return NaN;
  } else if (min > max) {
    const num = min;
    min = max;
    max = num;
  }
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются
};

/*
ЗАДАНИЕ №2:
Функция для проверки максимальной длины строки. Будет использоваться для проверки длины введённого комментария, но должна быть универсальна. Пример использования функции:

имя_функции(проверяемая_строка, максимальная_длина); // Результат: true, если строка проходит по длине, и false — если не проходит
*/

// const checkMaxLength = (text, maxLength) => text.length >= maxLength;

/*
ЗАДАНИЕ №3: Генерация данных
написать функции для создания массива из 25 сгенерированных объектов.
Каждый объект массива — описание фотографии, опубликованной пользователем.
Структура:
  +-id, число — идентификатор опубликованной фотографии. Это число от 1 до 25. Идентификаторы не должны повторяться.
  +-url, строка — адрес картинки вида photos/{{i}}.jpg, где {{i}} — это число от 1 до 25. Адреса картинок не должны повторяться.
  +-description, строка — описание фотографии. Описание придумайте самостоятельно.
  +-likes, число — количество лайков, поставленных фотографии. Случайное число от 15 до 200.
  +-comments, число — количество комментариев, оставленных другими пользователями к этой фотографии. Случайное число от 0 до 200.
 */
const idCount = {
  MIN: 1, // минимальное значение генератора
  MAX: 25, //максимальное значение генератора или нужное количество значений
};

const LikesCount = {
  MIN: 15, // минимальное значение лайков
  MAX: 200, //максимальное значение лайков
};

const CommentsCount = {
  MIN: 0, // минимальное значение комментариев
  MAX: 200, //максимальное значение комментариев
};

const comments = [
  'Всё отлично!',
  'В целом всё неплохо. Но не всё.',
  'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
  'Моя бабушка случайно чихнула с фотоаппаратом в руках и у неё получилась фотография лучше.',
  'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
  'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!',
];

const descriptions = [
  'Если смогу, я сделаю это. Конец истории.',
  'Смейтесь как только умеете, любите столько, сколько живете.',
  'Помните: вы единственный человек, который может наполнить ваш мир солнечным светом.',
  'Я полностью уверена, что я — диснеевская принцесса, которую еще не придумали.',
  'Жизнь — это всего лишь серия крошечных чудес, поэтому обратите внимание на них.',
  'Ни о чем не беспокойтесь. Потому что все лучшие умы на работе.',
  'Всегда начинайте свой день с хороших людей и кофе.',
  'Моя жизнь меняется, потому что меняю ее я.',
  'Не позволяйте кому-то затушить ваши искры только потому, что их свет сияет в чьих-то глазах.',
  'Делайте в вашей жизни то, что меньше заставляет вас смотреть в свой телефон.',
  'Улыбка — единственный тренд в моде, который актуален всегда. ',
  'Никогда не ищите свое счастье там, где вы его однажды потеряли.',
  'Жизнь похожа на фотокамеру: вам просто нужно смотреть на нее с улыбкой.',
];

// случайный элемент массива
const getRandomArrayElement = (array) =>
  array[getRandomIntInclusive(0, array.length - 1)];

// получение комментариев
const getComment = () =>
  Array.from(
    { length: getRandomIntInclusive(CommentsCount.MIN, CommentsCount.MAX) },
    () => getRandomArrayElement(comments)
  );

// генератор массива
const createPhotos = (index) => ({
  id: index,
  url: `photos/${index}.jpg`,
  description: getRandomArrayElement(descriptions),
  likes: getRandomIntInclusive(LikesCount.MIN, LikesCount.MAX),
  comments: getComment(),
});

const similarWizards = () =>
  Array.from({ length: idCount.MAX }, (_, photoIndex) =>
    createPhotos(photoIndex + 1)
  );
similarWizards();
